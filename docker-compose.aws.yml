# Docker Compose AWS 연결용 설정
# 로컬 개발시 .env.dev를 생성하고 AWS 정보를 입력하세요

##########################
# 네트워크 (자동 생성 가능)
##########################
networks:
  wordle-net:

##########################
# 볼륨 (AWS 연결용)
##########################
volumes:
  gradle_cache:           # Gradle ~/.gradle 캐시
  postgres_local_data:    # 로컬 DB용 (선택사항)

##########################
# 서비스 정의 (AWS 연결)
##########################
services:
  # ---------- ① Spring Backend (AWS RDS 연결) ----------
  backend:
    build:
      context: .                 # 루트에 있는 Dockerfile 사용
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # AWS 연결 환경변수 (환경별 .env 파일에서 로드)
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      TZ: Asia/Seoul
      
      # AWS RDS 연결 정보 (환경별로 다른 변수 사용)
      # DEV 환경
      AWS_DEV_DB_URL: ${AWS_DEV_DB_URL:-}
      AWS_DEV_DB_USERNAME: ${AWS_DEV_DB_USERNAME:-}
      AWS_DEV_DB_PASSWORD: ${AWS_DEV_DB_PASSWORD:-}
      
      # TEST 환경 (DEV와 같은 서버, 다른 DB)
      AWS_TEST_DB_URL: ${AWS_TEST_DB_URL:-}
      AWS_TEST_DB_USERNAME: ${AWS_TEST_DB_USERNAME:-}
      AWS_TEST_DB_PASSWORD: ${AWS_TEST_DB_PASSWORD:-}
      
      # PROD 환경 (별도 서버)
      AWS_PROD_DB_URL: ${AWS_PROD_DB_URL:-}
      AWS_PROD_DB_USERNAME: ${AWS_PROD_DB_USERNAME:-}
      AWS_PROD_DB_PASSWORD: ${AWS_PROD_DB_PASSWORD:-}
      
      # JWT 설정
      JWT_KEYSTORE_LOCATION: ${JWT_KEYSTORE_LOCATION:-classpath:keystore.p12}
      JWT_KEYSTORE_PASSWORD: ${JWT_KEYSTORE_PASSWORD:-changeit}
      JWT_KEYSTORE_ALIAS: ${JWT_KEYSTORE_ALIAS:-wordle-jwt}
      
      # Gradle 캐시
      GRADLE_USER_HOME: /home/gradle/.gradle
      
      # AWS 리전
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      
    volumes:
      # 코드 동기화 (핫 리로드)
      - ./:/workspace
      # Gradle 캐시 공유로 빌드 속도 향상
      - gradle_cache:/home/gradle/.gradle
      # entrypoint 스크립트 마운트
      - ./docker/entrypoint.sh:/app/entrypoint.sh:ro
      
    healthcheck:                 # Actuator 사용 (8080/actuator/health)
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s          # AWS 연결 시간 고려하여 증가
      
    networks:
      - wordle-net
    ports:
      - "${SERVER_PORT:-8080}:8080"
    entrypoint: ["sh", "/app/entrypoint.sh"]

  # ---------- ② 로컬 DB (선택사항 - 로컬 테스트용) ----------
  # AWS 연결 시에는 주석 처리하고 사용
  db-local:
    image: postgres:16           
    restart: unless-stopped
    environment:
      POSTGRES_DB: wordle_local
      POSTGRES_USER: wordle
      POSTGRES_PASSWORD: wordle
      TZ: Asia/Seoul
    volumes:
      - postgres_local_data:/var/lib/postgresql/data
    healthcheck:                 
      test: ["CMD-SHELL", "pg_isready -U wordle -d wordle_local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wordle-net
    ports:
      - "5433:5432"  # AWS와 충돌 방지를 위해 다른 포트 사용
    profiles:
      - local-db     # 필요시에만 실행: docker-compose --profile local-db up
