##########################
# 네트워크 (자동 생성 가능)
##########################
networks:
  wordle-net:

##########################
# 볼륨 (DB 데이터 영속)
##########################
volumes:
  postgres_data:          # DB 실제 데이터
  gradle_cache:           # Gradle ~/.gradle 캐시

##########################
# 서비스 정의
##########################
services:
  # ---------- ① PostgreSQL ----------
  db:
    image: postgres:16           # 공식 이미지 (PostgreSQL License, 무료)
    restart: unless-stopped
    environment:
      POSTGRES_DB: wordle
      POSTGRES_USER: wordle
      POSTGRES_PASSWORD: wordle
      TZ: Asia/Seoul
    volumes:
      # 데이터 영속 볼륨
      - postgres_data:/var/lib/postgresql/data
    healthcheck:                 # pg_isready 로 헬스 확인
      test: ["CMD-SHELL", "pg_isready -U wordle -d wordle"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wordle-net
    ports:
      - "5432:5432"
  # ---------- ② Spring Backend ----------
  backend:
    build:
      context: .                 # 루트에 있는 Dockerfile 사용
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: dev
      TZ: Asia/Seoul
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/wordle
      SPRING_DATASOURCE_USERNAME: wordle
      SPRING_DATASOURCE_PASSWORD: wordle
      GRADLE_USER_HOME: /home/gradle/.gradle
    depends_on:
      db:
        condition: service_healthy
    volumes:
      # 코드 동기화 (핫 리로드)
      - ./:/workspace
      # Gradle 캐시 공유로 빌드 속도 향상
      - gradle_cache:/home/gradle/.gradle
      # entrypoint 스크립트 마운트
      - ./docker/entrypoint.sh:/app/entrypoint.sh:ro
    healthcheck:                 # Actuator 사용 (8080/actuator/health)
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - wordle-net
    ports:
      - "8080:8080"
    entrypoint: ["sh", "/app/entrypoint.sh"]
